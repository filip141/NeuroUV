// Generated by gencpp from file controlvehicle/temperature.msg
// DO NOT EDIT!


#ifndef CONTROLVEHICLE_MESSAGE_TEMPERATURE_H
#define CONTROLVEHICLE_MESSAGE_TEMPERATURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controlvehicle
{
template <class ContainerAllocator>
struct temperature_
{
  typedef temperature_<ContainerAllocator> Type;

  temperature_()
    : pressure(0)
    , tem(0.0)  {
    }
  temperature_(const ContainerAllocator& _alloc)
    : pressure(0)
    , tem(0.0)  {
    }



   typedef int32_t _pressure_type;
  _pressure_type pressure;

   typedef float _tem_type;
  _tem_type tem;




  typedef boost::shared_ptr< ::controlvehicle::temperature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controlvehicle::temperature_<ContainerAllocator> const> ConstPtr;

}; // struct temperature_

typedef ::controlvehicle::temperature_<std::allocator<void> > temperature;

typedef boost::shared_ptr< ::controlvehicle::temperature > temperaturePtr;
typedef boost::shared_ptr< ::controlvehicle::temperature const> temperatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controlvehicle::temperature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controlvehicle::temperature_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace controlvehicle

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'controlvehicle': ['/home/pi/catkin_ws/src/controlvehicle/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::controlvehicle::temperature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controlvehicle::temperature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controlvehicle::temperature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controlvehicle::temperature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controlvehicle::temperature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controlvehicle::temperature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controlvehicle::temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "497bf7bb8f1746bcbb7992d334657900";
  }

  static const char* value(const ::controlvehicle::temperature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x497bf7bb8f1746bcULL;
  static const uint64_t static_value2 = 0xbb7992d334657900ULL;
};

template<class ContainerAllocator>
struct DataType< ::controlvehicle::temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controlvehicle/temperature";
  }

  static const char* value(const ::controlvehicle::temperature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controlvehicle::temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int32 pressure\n\
float32 tem\n\
";
  }

  static const char* value(const ::controlvehicle::temperature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controlvehicle::temperature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pressure);
      stream.next(m.tem);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct temperature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controlvehicle::temperature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controlvehicle::temperature_<ContainerAllocator>& v)
  {
    s << indent << "pressure: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pressure);
    s << indent << "tem: ";
    Printer<float>::stream(s, indent + "  ", v.tem);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLVEHICLE_MESSAGE_TEMPERATURE_H
